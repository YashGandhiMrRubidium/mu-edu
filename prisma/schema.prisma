// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongodb"]
}
model Course {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean      @default(false)
  categoryId  String?
  category    Category?    @relation(fields: [categoryId], references: [id])
  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  @@index([categoryId])
}
model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  courses Course[]
}
model Attachment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([courseId])
}
model Chapter {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  videoUrl      String?
  position      Int
  isPublished   Boolean      @default(false)
  isFree        Boolean      @default(false)
  muxData       MuxData?    
  muxDataId     String?
  courseId      String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress  UserProgress[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  @@index([courseId])
}
model MuxData {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  assetId   String
  playbackId String?
  chapter   Chapter?      @relation(fields: [chapterId], references: [id])
  chapterId String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}
model UserProgress {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  chapter    Chapter?      @relation(fields: [chapterId], references: [id])
  chapterId  String
  isCompleted Boolean      @default(false)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  @@index([chapterId])
  @@unique([userId, chapterId])
}
model StripeCustomer {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @unique
  stripeCustomerId  String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
model Purchase {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  courseId    String
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([userId, courseId])
  @@index([courseId])
}